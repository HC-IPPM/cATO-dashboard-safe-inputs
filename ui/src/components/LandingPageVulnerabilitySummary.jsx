import useFetchData from "../hooks/useFetchData";
import { GcdsText } from "@cdssnc/gcds-components-react";
import { useTranslation } from "react-i18next";
import DataTable from "./DataTable"; // Import DataTable component

const severityOrder = ["CRITICAL", "HIGH", "MEDIUM", "LOW", "SEVERITY_UNSPECIFIED", "UNKNOWN"];

export default function VulnerabilitySummary() {
  const { t } = useTranslation();
  const { data, loading, error } = useFetchData("vulnerabilities");

  if (loading) return <GcdsText>Loading...</GcdsText>;
  if (error) return <GcdsText>Error: {error}</GcdsText>;

  // Group vulnerabilities by ID and count per severity
  const uniqueVulnerabilities = {};
  data.forEach((item) => {
    if (!uniqueVulnerabilities[item.vulnerabilityId]) {
      uniqueVulnerabilities[item.vulnerabilityId] = item.severity;
    }
  });

  // Count vulnerabilities per severity (without duplicates - could have same ID for more than one module)
  const summary = Object.values(uniqueVulnerabilities).reduce((acc, severity) => {
    acc[severity] = (acc[severity] || 0) + 1;
    return acc;
  }, {});

  // Determine pass/fail status (Fail if any CRITICAL or HIGH vulnerabilities exist)
  const hasCriticalOrHigh = summary["CRITICAL"] > 0 || summary["HIGH"] > 0;
  const passFailStatus = hasCriticalOrHigh ? "❌ Fail" : "✅ Pass";

  // Filter out empty severity columns
  const activeSeverities = severityOrder.filter((severity) => summary[severity] > 0);

  // Format data for DataTable
  const formattedData = [
    {
      ...activeSeverities.reduce((acc, severity) => {
        acc[severity] = summary[severity] || 0;
        return acc;
      }, {}),
      status: passFailStatus,
    },
  ];

  return (
    <>
      <DataTable
        headers={[
          ...activeSeverities.map((severity) => t(`pages.vulnerabilities.severity.${severity.toLowerCase()}`)),
          t("pages.vulnerabilities.table.status"),
        ]}
        rows={formattedData}
        keys={[...activeSeverities, "status"]}
      />
    </>
  );
}
