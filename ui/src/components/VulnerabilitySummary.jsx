import { useEffect, useState } from "react";
import { GcdsHeading, GcdsText } from "@cdssnc/gcds-components-react";
import { useTranslation } from "react-i18next";

const severityOrder = ["CRITICAL", "HIGH", "MEDIUM", "LOW", "SEVERITY_UNSPECIFIED", "UNKNOWN"];

export default function VulnerabilitySummary() {
  const { t } = useTranslation();
  const [summary, setSummary] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const API_URL = import.meta.env.VITE_API_URL || "https://localhost:3000";

  useEffect(() => {
    const fetchSummary = async () => {
      try {
        const response = await fetch(`${API_URL}/vulnerabilities`, { credentials: "include" });
        if (!response.ok) throw new Error(`Error: ${response.statusText}`);

        const result = await response.json();
        const counts = result.reduce((acc, item) => {
          acc[item.severity] = (acc[item.severity] || 0) + 1;
          return acc;
        }, {});

        setSummary(counts);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchSummary();
  }, [API_URL]);

  return (
    <>
      <GcdsHeading tag="h2">{t("pages.landingPage.vulnerabilityTitle")}</GcdsHeading>
      <GcdsText>{t("pages.landingPage.vulnerabilityText")}</GcdsText>

      {loading ? <GcdsText>Loading...</GcdsText> : error ? <GcdsText>Error: {error}</GcdsText> : (
        <table className="gcds-table">
          <thead>
            <tr>
              {severityOrder
                .filter((severity) => summary[severity] > 0) // only keep columns with results
                .map((severity) => (
                  <th key={severity}>
                    <GcdsText>{t(`pages.vulnerabilities.severity.${severity.toLowerCase()}`)}</GcdsText>
                  </th>
                ))}
            </tr>
          </thead>
          <tbody>
          <tr>
            {severityOrder
              .filter((severity) => summary[severity] > 0)
              .map((severity) => (
                <td key={severity}>
                  <GcdsText>{summary[severity]}</GcdsText>
                </td>
              ))}
          </tr>
          </tbody>
        </table>
      )}
    </>
  );
}
